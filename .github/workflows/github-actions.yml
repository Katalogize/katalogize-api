name: Publish Katalogize

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  
env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: katalogize           # set this to your Amazon ECR repository name
  ECS_SERVICE: katalogize-api-service               # set this to your Amazon ECS service name
  ECS_CLUSTER: katalogize-ecs                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./aws/task-definition-ec2.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: katalogize-api           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build
      run: ./gradlew bootJar

    #- name: Build with Gradle
    #  uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
    #  with:
    #    arguments: build
        
    #- name: Docker Login
    #  env:
    #    DOCKER_USER: ${{secrets.DOCKER_USER}}
    #    DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
    #  run:
    #    docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      
    #- name: Build the Docker Image and Push
    #  run: |
    #    docker build -t katalogize/katalogize-api .
    #    docker tag katalogize/katalogize-api:latest ${{secrets.DOCKER_USER}}/$REPO:latest
    #    docker push ${{secrets.DOCKER_USER}}/katalogize/katalogize-api
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
      
    #- name: Deploy to AWS
    #  uses: easingthemes/ssh-deploy@main
    #  env:
    #    SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
    #    REMOTE_HOST: ${{ secrets.HOST_DNS }}
    #    REMOTE_USER: ${{ secrets.USERNAME }}
    #    TARGET: ${{ secrets.TARGET_DIR }}
