type Query {
    getAllCatalogs: [Catalog]
    getCatalogById(id: ID): Catalog
    getAllCatalogsByUserId(id: ID): [Catalog]
    getAllCatalogsByLoggedUser: [Catalog]
    getCatalogsByUsername(username: String): [Catalog]
    getCatalogByUsernameAndCatalogName(username: String, catalogName: String): Catalog

    getAllCatalogItems: [CatalogItem]
    getCatalogItem(username: String, catalogName: String, itemName: String): CatalogItem
    getCatalogItemById(id: ID): CatalogItem
    getAllCatalogItemsByCatalogId(id: ID): [CatalogItem]

    getAllCatalogTemplates: [CatalogTemplate]

    getAllUsers: [User]
    getUserById(id: ID): User
    getLoggedUser: User
}

type Catalog {
    id: ID
    name: String
    description: String
    user: User
    templates: [CatalogTemplate]
    isPrivate: Boolean
    items: [CatalogItem]
}

type CatalogItem {
    id: ID
    name: String
    catalogId: ID
    templateId: ID
    template: CatalogTemplate
    fields: [ItemField]
}

union ItemField = ItemFieldInt | ItemFieldString

type ItemFieldInt {
    order: Int
    name: String!
    value: Int
}

type ItemFieldString {
    order: Int
    name: String!
    value: String
}

type User {
    id: ID
    firstName: String
    lastName: String
    email: String
    username: String
}

type CatalogTemplate {
    id: ID
    name: String
    allowNewFields: Boolean
    templateFields: [TemplateField]
}

type TemplateField {
    order: Int
    name: String
    fieldType: Int
}

type AuthenticationData {
    accessToken: String
    refreshToken: String
    userId: ID
    username: String
    email: String
    roles: [String]
}